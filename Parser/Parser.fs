// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser/Parser.fsy"

    open Ast

# 10 "Parser/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | FOR
  | SKIP
  | TO
  | TRUE
  | FALSE
  | START_STMT
  | END_STMT
  | PLUS
  | MINUS
  | MULT
  | DIV
  | ASSIGN
  | INCEQ
  | DECEQ
  | MULTEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | EQ
  | NEQ
  | INC
  | DEC
  | AND
  | OR
  | NOT
  | COMP
  | STRING of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_FOR
    | TOKEN_SKIP
    | TOKEN_TO
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_START_STMT
    | TOKEN_END_STMT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_ASSIGN
    | TOKEN_INCEQ
    | TOKEN_DECEQ
    | TOKEN_MULTEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_INC
    | TOKEN_DEC
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_COMP
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprog
    | NONTERM_prog
    | NONTERM_seq_expr
    | NONTERM_statement
    | NONTERM_bexpr
    | NONTERM_aexpr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IF  -> 1 
  | THEN  -> 2 
  | ELSE  -> 3 
  | WHILE  -> 4 
  | DO  -> 5 
  | FOR  -> 6 
  | SKIP  -> 7 
  | TO  -> 8 
  | TRUE  -> 9 
  | FALSE  -> 10 
  | START_STMT  -> 11 
  | END_STMT  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | MULT  -> 15 
  | DIV  -> 16 
  | ASSIGN  -> 17 
  | INCEQ  -> 18 
  | DECEQ  -> 19 
  | MULTEQ  -> 20 
  | LT  -> 21 
  | GT  -> 22 
  | LEQ  -> 23 
  | GEQ  -> 24 
  | EQ  -> 25 
  | NEQ  -> 26 
  | INC  -> 27 
  | DEC  -> 28 
  | AND  -> 29 
  | OR  -> 30 
  | NOT  -> 31 
  | COMP  -> 32 
  | STRING _ -> 33 
  | INT _ -> 34 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IF 
  | 2 -> TOKEN_THEN 
  | 3 -> TOKEN_ELSE 
  | 4 -> TOKEN_WHILE 
  | 5 -> TOKEN_DO 
  | 6 -> TOKEN_FOR 
  | 7 -> TOKEN_SKIP 
  | 8 -> TOKEN_TO 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_START_STMT 
  | 12 -> TOKEN_END_STMT 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_MULT 
  | 16 -> TOKEN_DIV 
  | 17 -> TOKEN_ASSIGN 
  | 18 -> TOKEN_INCEQ 
  | 19 -> TOKEN_DECEQ 
  | 20 -> TOKEN_MULTEQ 
  | 21 -> TOKEN_LT 
  | 22 -> TOKEN_GT 
  | 23 -> TOKEN_LEQ 
  | 24 -> TOKEN_GEQ 
  | 25 -> TOKEN_EQ 
  | 26 -> TOKEN_NEQ 
  | 27 -> TOKEN_INC 
  | 28 -> TOKEN_DEC 
  | 29 -> TOKEN_AND 
  | 30 -> TOKEN_OR 
  | 31 -> TOKEN_NOT 
  | 32 -> TOKEN_COMP 
  | 33 -> TOKEN_STRING 
  | 34 -> TOKEN_INT 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprog 
    | 1 -> NONTERM_prog 
    | 2 -> NONTERM_seq_expr 
    | 3 -> NONTERM_seq_expr 
    | 4 -> NONTERM_seq_expr 
    | 5 -> NONTERM_statement 
    | 6 -> NONTERM_statement 
    | 7 -> NONTERM_statement 
    | 8 -> NONTERM_statement 
    | 9 -> NONTERM_statement 
    | 10 -> NONTERM_statement 
    | 11 -> NONTERM_statement 
    | 12 -> NONTERM_bexpr 
    | 13 -> NONTERM_bexpr 
    | 14 -> NONTERM_bexpr 
    | 15 -> NONTERM_bexpr 
    | 16 -> NONTERM_bexpr 
    | 17 -> NONTERM_bexpr 
    | 18 -> NONTERM_bexpr 
    | 19 -> NONTERM_bexpr 
    | 20 -> NONTERM_bexpr 
    | 21 -> NONTERM_bexpr 
    | 22 -> NONTERM_bexpr 
    | 23 -> NONTERM_bexpr 
    | 24 -> NONTERM_aexpr 
    | 25 -> NONTERM_aexpr 
    | 26 -> NONTERM_aexpr 
    | 27 -> NONTERM_aexpr 
    | 28 -> NONTERM_aexpr 
    | 29 -> NONTERM_aexpr 
    | 30 -> NONTERM_aexpr 
    | 31 -> NONTERM_aexpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | DO  -> "DO" 
  | FOR  -> "FOR" 
  | SKIP  -> "SKIP" 
  | TO  -> "TO" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | START_STMT  -> "START_STMT" 
  | END_STMT  -> "END_STMT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | ASSIGN  -> "ASSIGN" 
  | INCEQ  -> "INCEQ" 
  | DECEQ  -> "DECEQ" 
  | MULTEQ  -> "MULTEQ" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | INC  -> "INC" 
  | DEC  -> "DEC" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | COMP  -> "COMP" 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | START_STMT  -> (null : System.Object) 
  | END_STMT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | INCEQ  -> (null : System.Object) 
  | DECEQ  -> (null : System.Object) 
  | MULTEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | INC  -> (null : System.Object) 
  | DEC  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | COMP  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;4us;65535us;0us;2us;5us;6us;10us;8us;25us;9us;7us;65535us;0us;4us;5us;4us;10us;4us;13us;14us;15us;16us;19us;20us;25us;4us;6us;65535us;11us;12us;17us;18us;33us;29us;34us;30us;35us;31us;52us;32us;19us;65535us;11us;38us;17us;38us;22us;23us;33us;38us;34us;38us;35us;38us;40us;41us;42us;43us;44us;45us;46us;47us;48us;49us;50us;51us;52us;39us;60us;54us;61us;55us;62us;56us;63us;57us;64us;58us;67us;59us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;8us;16us;23us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;4us;1us;1us;1us;2us;2us;3us;9us;3us;3us;4us;9us;2us;3us;9us;2us;4us;4us;2us;4us;9us;1us;4us;1us;5us;3us;5us;12us;13us;1us;5us;1us;5us;1us;5us;1us;5us;1us;6us;3us;6us;12us;13us;1us;6us;1us;6us;3us;7us;10us;11us;1us;7us;5us;7us;24us;25us;26us;27us;1us;8us;1us;9us;1us;9us;1us;10us;1us;11us;3us;12us;12us;13us;3us;12us;13us;13us;3us;12us;13us;14us;3us;12us;13us;23us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;10us;17us;18us;19us;20us;21us;22us;24us;25us;26us;27us;11us;17us;18us;19us;20us;21us;22us;24us;25us;26us;27us;31us;1us;17us;5us;17us;24us;25us;26us;27us;1us;18us;5us;18us;24us;25us;26us;27us;1us;19us;5us;19us;24us;25us;26us;27us;1us;20us;5us;20us;24us;25us;26us;27us;1us;21us;5us;21us;24us;25us;26us;27us;1us;22us;5us;22us;24us;25us;26us;27us;2us;23us;31us;1us;23us;5us;24us;24us;25us;26us;27us;5us;24us;25us;25us;26us;27us;5us;24us;25us;26us;26us;27us;5us;24us;25us;26us;27us;27us;5us;24us;25us;26us;27us;28us;5us;24us;25us;26us;27us;31us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;1us;31us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;14us;18us;21us;24us;27us;29us;31us;35us;37us;39us;41us;43us;45us;49us;51us;53us;57us;59us;65us;67us;69us;71us;73us;75us;79us;83us;87us;91us;93us;95us;97us;99us;101us;112us;124us;126us;132us;134us;140us;142us;148us;150us;156us;158us;164us;166us;172us;175us;177us;183us;189us;195us;201us;207us;213us;215us;217us;219us;221us;223us;225us;227us;229us;|]
let _fsyacc_action_rows = 69
let _fsyacc_actionTableElements = [|5us;32768us;1us;11us;4us;17us;7us;24us;11us;5us;33us;21us;0us;49152us;2us;32768us;0us;3us;32us;10us;0us;16385us;0us;16386us;5us;32768us;1us;11us;4us;17us;7us;24us;11us;5us;33us;21us;2us;32768us;12us;7us;32us;10us;0us;16387us;1us;16388us;32us;10us;2us;32768us;12us;26us;32us;10us;5us;32768us;1us;11us;4us;17us;7us;24us;11us;5us;33us;21us;7us;32768us;9us;36us;10us;37us;11us;52us;14us;64us;31us;35us;33us;66us;34us;65us;3us;32768us;2us;13us;29us;33us;30us;34us;5us;32768us;1us;11us;4us;17us;7us;24us;11us;25us;33us;21us;1us;32768us;3us;15us;5us;32768us;1us;11us;4us;17us;7us;24us;11us;25us;33us;21us;0us;16389us;7us;32768us;9us;36us;10us;37us;11us;52us;14us;64us;31us;35us;33us;66us;34us;65us;3us;32768us;5us;19us;29us;33us;30us;34us;5us;32768us;1us;11us;4us;17us;7us;24us;11us;25us;33us;21us;0us;16390us;3us;32768us;17us;22us;27us;27us;28us;28us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;16391us;13us;60us;14us;61us;15us;62us;16us;63us;0us;16392us;5us;32768us;1us;11us;4us;17us;7us;24us;11us;5us;33us;21us;0us;16393us;0us;16394us;0us;16395us;0us;16396us;1us;16397us;29us;33us;2us;16398us;29us;33us;30us;34us;3us;32768us;12us;53us;29us;33us;30us;34us;7us;32768us;9us;36us;10us;37us;11us;52us;14us;64us;31us;35us;33us;66us;34us;65us;7us;32768us;9us;36us;10us;37us;11us;52us;14us;64us;31us;35us;33us;66us;34us;65us;7us;32768us;9us;36us;10us;37us;11us;52us;14us;64us;31us;35us;33us;66us;34us;65us;0us;16399us;0us;16400us;10us;32768us;13us;60us;14us;61us;15us;62us;16us;63us;21us;46us;22us;48us;23us;40us;24us;42us;25us;44us;26us;50us;11us;32768us;12us;68us;13us;60us;14us;61us;15us;62us;16us;63us;21us;46us;22us;48us;23us;40us;24us;42us;25us;44us;26us;50us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;16401us;13us;60us;14us;61us;15us;62us;16us;63us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;16402us;13us;60us;14us;61us;15us;62us;16us;63us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;16403us;13us;60us;14us;61us;15us;62us;16us;63us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;16404us;13us;60us;14us;61us;15us;62us;16us;63us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;16405us;13us;60us;14us;61us;15us;62us;16us;63us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;16406us;13us;60us;14us;61us;15us;62us;16us;63us;7us;32768us;9us;36us;10us;37us;11us;52us;14us;64us;31us;35us;33us;66us;34us;65us;0us;16407us;2us;16408us;15us;62us;16us;63us;2us;16409us;15us;62us;16us;63us;0us;16410us;0us;16411us;2us;16412us;15us;62us;16us;63us;5us;32768us;12us;68us;13us;60us;14us;61us;15us;62us;16us;63us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;0us;16413us;0us;16414us;4us;32768us;11us;67us;14us;64us;33us;66us;34us;65us;0us;16415us;|]
let _fsyacc_actionTableRowOffsets = [|0us;6us;7us;10us;11us;12us;18us;21us;22us;24us;27us;33us;41us;45us;51us;53us;59us;60us;68us;72us;78us;79us;83us;88us;93us;94us;100us;101us;102us;103us;104us;106us;109us;113us;121us;129us;137us;138us;139us;150us;162us;167us;172us;177us;182us;187us;192us;197us;202us;207us;212us;217us;222us;230us;231us;234us;237us;238us;239us;242us;248us;253us;258us;263us;268us;273us;274us;275us;280us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;3us;3us;6us;4us;3us;1us;3us;2us;2us;3us;3us;2us;1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;1us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;3us;3us;3us;3us;3us;3us;3us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16389us;65535us;65535us;65535us;16390us;65535us;65535us;65535us;16392us;65535us;16393us;16394us;16395us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16399us;16400us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16407us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16413us;16414us;65535us;16415us;|]
let _fsyacc_reductions = lazy [|
# 305 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Ast.Statement  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startprog));
# 314 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser/Parser.fsy"
                                                                  _1 
                   )
# 32 "Parser/Parser.fsy"
                 :  Ast.Statement ));
# 325 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser/Parser.fsy"
                                                                            _1 
                   )
# 35 "Parser/Parser.fsy"
                 : 'gentype_seq_expr));
# 336 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser/Parser.fsy"
                                                                       _2 
                   )
# 36 "Parser/Parser.fsy"
                 : 'gentype_seq_expr));
# 347 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_seq_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser/Parser.fsy"
                                                                       Composition (_1, _3) 
                   )
# 37 "Parser/Parser.fsy"
                 : 'gentype_seq_expr));
# 359 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_statement in
            let _6 = parseState.GetInput(6) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser/Parser.fsy"
                                                                                 Conditional (_2, _4, _6) 
                   )
# 41 "Parser/Parser.fsy"
                 : 'gentype_statement));
# 372 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            let _4 = parseState.GetInput(4) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser/Parser.fsy"
                                                                            While (_2, _4) 
                   )
# 42 "Parser/Parser.fsy"
                 : 'gentype_statement));
# 384 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser/Parser.fsy"
                                                                            Assignment (_1, _3) 
                   )
# 43 "Parser/Parser.fsy"
                 : 'gentype_statement));
# 396 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser/Parser.fsy"
                                                                       Skip 
                   )
# 44 "Parser/Parser.fsy"
                 : 'gentype_statement));
# 406 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_seq_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser/Parser.fsy"
                                                                       _2 
                   )
# 45 "Parser/Parser.fsy"
                 : 'gentype_statement));
# 417 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser/Parser.fsy"
                                                           IncDec (_1, "++")
                   )
# 46 "Parser/Parser.fsy"
                 : 'gentype_statement));
# 428 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser/Parser.fsy"
                                                           IncDec (_1, "--")
                   )
# 47 "Parser/Parser.fsy"
                 : 'gentype_statement));
# 439 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser/Parser.fsy"
                                                           BBinOp (_1, "&&", _3) 
                   )
# 50 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 451 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_bexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser/Parser.fsy"
                                                           BBinOp (_1, "||", _3) 
                   )
# 51 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 463 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser/Parser.fsy"
                                                           BUnOp ("!", _2) 
                   )
# 52 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 474 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser/Parser.fsy"
                                                           BConst (true) 
                   )
# 53 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 484 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser/Parser.fsy"
                                                           BConst (false) 
                   )
# 54 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 494 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser/Parser.fsy"
                                                           BoolRelation (_1, "<=", _3) 
                   )
# 55 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 506 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser/Parser.fsy"
                                                           BoolRelation (_1, ">=", _3) 
                   )
# 56 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 518 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser/Parser.fsy"
                                                           BoolRelation (_1, "=", _3) 
                   )
# 57 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 530 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser/Parser.fsy"
                                                           BoolRelation (_1, "<", _3) 
                   )
# 58 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 542 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser/Parser.fsy"
                                                           BoolRelation (_1, ">", _3) 
                   )
# 59 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 554 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser/Parser.fsy"
                                                           BoolRelation (_1, "!=", _3) 
                   )
# 60 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 566 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_bexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser/Parser.fsy"
                                                           _2 
                   )
# 61 "Parser/Parser.fsy"
                 : 'gentype_bexpr));
# 577 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser/Parser.fsy"
                                                           ABinOp (_1, "+", _3) 
                   )
# 64 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
# 589 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser/Parser.fsy"
                                                           ABinOp (_1, "-", _3) 
                   )
# 65 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
# 601 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser/Parser.fsy"
                                                           ABinOp (_1, "*", _3) 
                   )
# 66 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
# 613 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aexpr in
            let _3 = parseState.GetInput(3) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser/Parser.fsy"
                                                           ABinOp (_1, "/", _3) 
                   )
# 67 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
# 625 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser/Parser.fsy"
                                                           Neg (_2) 
                   )
# 68 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
# 636 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser/Parser.fsy"
                                                           AConst (_1) 
                   )
# 69 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
# 647 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser/Parser.fsy"
                                                           Var (_1) 
                   )
# 70 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
# 658 "Parser/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_aexpr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser/Parser.fsy"
                                                           _2 
                   )
# 71 "Parser/Parser.fsy"
                 : 'gentype_aexpr));
|]
# 670 "Parser/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let prog lexer lexbuf :  Ast.Statement  =
    engine lexer lexbuf 0 :?> _
